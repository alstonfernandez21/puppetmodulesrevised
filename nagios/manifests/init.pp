class nagios {
   
   file { "/etc/yum.repos.d/rpmforge-testing.repo":
            mode        => "0644",
            owner       => "root",
            group       => "root",
            source      => 'puppet:///modules/nagios/etc/yum.repos.d/rpmforge-testing.repo',
            before => Package[nagios],
         }

   file { "/etc/yum.repos.d/rpmforge.repo":
            mode        => "0644",
            owner       => "root",
            group       => "root",
            source      => 'puppet:///modules/nagios/etc/yum.repos.d/rpmforge.repo',
            before => Package[nagios],
         }

   

    package {
      "nagios":  ensure => present;
      "httpd":   ensure => present;
    }

    file { "/etc/nagios/objects/commands.cfg":
            mode        => "0664",
            owner       => "nagios",
            group       => "nagios",
            source      => 'puppet:///modules/nagios/etc/nagios/objects/commands.cfg',
            notify => Service[nagios],
	    require => Package[nagios],
	 }
	    

    
    service {"nagios":
        enable => true,
        ensure  => running,
        hasstatus       => true,
        hasrestart      => true,
        require => Package[nagios],
        #subscribe => File["/etc/nagios"],
    }
    
    service {"httpd":
        enable => true,
        ensure  => running,
        hasstatus       => true,
        hasrestart      => true,
        require => Package[nagios],
    }


    ### Puppet is unable to reload a service from autogenerated files
    ### Create cronjob to automatically reload the nagios configuration once per hour
    cron { "nagreload":
        command => "/etc/init.d/nagios reload",
        user    => "root",
        minute  => "10",
    }
}


        
    #### collect resources and populate /etc/nagios/nagios_*.cfg####
    #### Uses puppet built in nagios hooks to find information about client machines ###
    #### and automatically create nagios configurations for them ####
    
class nagiostarget (
	$allowed_hosts = '192.168.25.74',
	$check_users = '-w 2 -c 10',
	$check_load = '-w 15,10,5 -c 30,25,20',
	$check_root = '-w 20% -c 10% -p /',
	$check_swap = '-w 50% -c 30%',
	$check_zombie_procs = '-w 5 -c 10 -s Z',
	$check_total_procs = '-w 150 -c 200',
	$mysql_monitor = 'false',
	$redis_monitor = 'false',
	$memcached_monitor = 'false',
	$mongodb_monitor = 'false',
	$http_monitor = 'false',
	$mysql_replmon = 'false',
	) {
		
	 Nagios_host <<||>>
    	 Nagios_service <<||>>
    	 Nagios_hostextinfo <<||>>

	 #resources { "nagios_service":
         # 	purge => true
    	 #}
    	 #resources { "nagios_host":
         # 	purge => true
    	 #}
   	 #resources { "nagios_hostgroup":
         # 	purge => true
    	 #}

	resources { [ "nagios_service", "nagios_servicegroup", "nagios_hostgroup",  "nagios_host" ]:
    		purge => true;
	}
	
        $nrpeservice = "nrpe"
        $nrpepattern = "nrpe"
        $nrpepackage = "nrpe"
        $nrpedir     = "/etc/nagios"
        $nagiosuser  = "nrpe"
        $nagiosgroup = "nrpe"
        $pluginsdir  = "/usr/lib/nagios/plugins"
        $sudopath    = "/usr/bin"
        
        # Install the correct packages based on OS   
        case $operatingsystem {
            default: {
                package {
                "nagios-nrpe":          ensure => present;
                "nagios-plugins-all":   ensure => present;
                "nagios-plugins-nrpe":  ensure => present;
                }
            }
            ubuntu: {
                package {
                    "nagios-nrpe-server":   ensure => present;
                    "nagios-nrpe-plugin":   ensure => present;
                }
            }
        }

        # x86_64 Centos installes into /usr/lib64 by default, create a symlink
        # so that nagios can find it's plugins.
        case $architecture {
            x86_64: {               
                case $operatingsystem {
                    centos: {
                        file { "/usr/lib/nagios":
                            ensure => link,
                            target => "/usr/lib64/nagios",
                        }                    
                    }                
                }
            }    
        }
            
        service {"nrpe":
            name => $operatingsystem ? {
                ubuntu => "nagios-nrpe-server",
                default => "nrpe",
            },
            enable => true,
            hasrestart      => true,
            # require => Package[nrpe],
            subscribe => File["/etc/nagios/nrpe.cfg"],
            ensure  => running,
        }
            


        file { "/etc/nagios/nrpe.cfg":
            mode    => "644",
            owner => $operatingsystem ? {
                ubuntu => "root",
                default => "nrpe",            
            },            
            group => $operatingsystem ? {
                ubuntu => "root",
                default => "nrpe",            
            },            
	    content => template("nagios/nrpe.cfg.erb"),
            #source    => 'puppet:///modules/nagios/etc/nagios/nrpe.cfg',
	    notify => Service[nrpe],
        }

	## ADDS THE MYSQL SLAVE CHECK PLUGIN 
	 file { "/usr/lib64/nagios/plugins/check_mysqld.pl":
            mode    => "0755",
            owner => $operatingsystem ? {
                ubuntu => "root",
                default => "root",
            },
            group => $operatingsystem ? {
                ubuntu => "root",
                default => "root",
            },
            source    => 'puppet:///modules/nagios/usr/lib64/nagios/plugins/check_mysqld.pl',
            require   => Package["nagios-plugins-nrpe"],
        }


        ## Build the /etc/nagios/nagios_host.cfg file on the server    
        @@nagios_host { $fqdn:
            ensure => present,
            alias => $hostname,
            address => $ipaddress,
            use => "linux-server",
            check_command => "check-host-alive",
            max_check_attempts => 3,
            hostgroups => "linux-servers",
            contact_groups => "admins",
        }

        ## Build nagios_hostextinfo.cfg on server    
        @@nagios_hostextinfo { $fqdn:
           ensure => present,
           icon_image_alt => $operatingsystem,
           icon_image => "base/$operatingsystem.png",
           statusmap_image => "base/$operatingsystem.gd2",
        }

        # Build nagios_service.cfg on server    
        @@nagios_service { "check_ping_${hostname}":
            host_name => "$fqdn",
            use => "generic-service",
            service_description => "Ping",
            check_command => "check_ping!100.0,20%!500.0,60%",
        }
    
        @@nagios_service { "check_users_${hostname}":
            use => "generic-service",
            check_command => "check_nrpe!check_users",
            service_description => "Users",
            host_name => "$fqdn",
        }
    
        @@nagios_service { "check_load_${hostname}":
            use => "generic-service",    
            check_command => "check_nrpe!check_load",
            service_description => "Check Load",
            host_name => "$fqdn",
        }
    
        @@nagios_service { "check_zombie_procs_${hostname}":
            use => "generic-service",
            check_command => "check_nrpe!check_zombie_procs",
            service_description => "Zombie Processes",
            host_name => "$fqdn",
        }
    
        @@nagios_service { "check_total_procs_${hostname}":
            use => "generic-service",
            check_command => "check_nrpe!check_total_procs",
            service_description => "Total Processes",
            host_name => "$fqdn",
        }
    
        @@nagios_service { "check_swap_${hostname}":
            use => "generic-service",
            check_command => "check_nrpe!check_swap",
            service_description => "Swap File",
            host_name => "$fqdn",
        }
    
        @@nagios_service { "check_all_disks_${hostname}":
            use => "generic-service",
            check_command => "check_nrpe!check_root !20%!10%!",
            service_description => "Disk Status",
            host_name => "$fqdn",
        }
	if $mysql_monitor == 'true' {
        @@nagios_service { "check_mysql_${hostname}":
            use => "generic-service",
            check_command => "check_nrpe!check_mysql -u test",
            service_description => "MySQL Check Status",
            host_name => "$fqdn",
        }
	}
	if $redis_monitor == 'true' {
	@@nagios_service { "check_tcp_redis_${hostname}":
	   use => "generic-service",
	   check_command => "check_nrpe!check_tcp_redis",
	   service_description => "Redis Check Status",
	   host_name => "$fqdn",
	}
	}

	 if $memcached_monitor == 'true' {
         @@nagios_service { "check_tcp_memcached_${hostname}":
           use => "generic-service",
           check_command => "check_nrpe!check_tcp_memcached",
           service_description => "Memcached Check Status",
           host_name => "$fqdn",
        }
        }
	
	if $mongodb_monitor == 'true' {
         @@nagios_service { "check_tcp_mongodb_${hostname}":
           use => "generic-service",
           check_command => "check_nrpe!check_tcp_mongodb",
           service_description => "MongoDB Check Status",
           host_name => "$fqdn",
        }
        }
	
	if $http_monitor == 'true' {
         @@nagios_service { "check_tcp_http_${hostname}":
           use => "generic-service",
           check_command => "check_nrpe!check_tcp_http",
           service_description => "HTTP Check Status",
           host_name => "$fqdn",
        }
        }
	
	if $mysql_replmon == 'true' {
	 @@nagios_service { "check_mysql_repl_${hostname}":
	   use => "generic-service",
	   check_command => "check_nrpe!check_mysql_repl",
	   service_description => "MySQL Slave replication",
	   host_name => "$fqdn",
	}
	}	


}


